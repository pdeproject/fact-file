#!/usr/bin/env python
# Copyright (c) The SimpleFIN Team
# See LICENSE for details.

from siloscript import getValue, getToken
from functools import partial
from splinter import Browser
from datetime import date, timedelta
from urlparse import urljoin
from StringIO import StringIO
from parsefin import parseFile
import requests
import json
import argparse

i = 0
def screenshot(browser, name=''):
    global i
    name = name or 'def'
    i += 1
    browser.driver.save_screenshot('/tmp/images/%d-%s.png' % (i, name))


def getOFX(username, password, startdate, enddate, verbose=False):
    with Browser() as browser:
        shot = partial(screenshot, browser)
        if not verbose:
            shot = lambda *a,**kw:None

        # sign in
        browser.visit('https://servicing.capitalone.com/c1/Login.aspx')
        browser.is_element_present_by_id('loginframe', wait_time=10)
        with browser.get_iframe(1) as iframe:
            iframe.is_element_present_by_id('uname', wait_time=10)
            iframe.fill('username', username)
            iframe.fill('password', password)
            iframe.find_by_id('cofisso_btn_login').click()
        shot('afterfill')
        browser.is_element_present_by_id('transactionsLink0', wait_time=10)

        # click through to download page
        shot('in')
        browser.click_link_by_text('Transactions')

        if not browser.is_text_present('Download Transactions', wait_time=10):
            shot('no download')
            raise Exception('no download link')
        shot('clicktrans')
        browser.click_link_by_text('Download Transactions')

        if not browser.is_element_present_by_name('txtFromDate$TextBox', wait_time=10):
            shot('noinput')
            raise Exception('no input for date')
        
        # compute download url, cookies and form data for requests lib
        browser.fill('txtFromDate$TextBox', startdate.strftime('%m/%d/%y'))
        browser.fill('txtToDate$TextBox', enddate.strftime('%m/%d/%y'))
        browser.find_by_value('OFX').click()
        shot('beforedownload')

        input_names = [
            '__EVENTTARGET',
            '__EVENTARGUMENT',
            '__LASTFOCUS',
            'DES_Group',
            '__VIEWSTATE',
            'DES_JSE',
            '__VIEWSTATEGENERATOR',
            '__EVENTVALIDATION',
            # no needed?
            'FAVORITESDROPDOWN',
            'hidChatVars',
            'hfStartDateLabel',
            'hfEndDateLabel',

            # account select
            'cboAccountTypeList',

            # custom
            'txtFromDate$TextBox',
            'txtToDate$TextBox',
            #'ctlStatementFilter',
        ]
        data = {
            'btnDownload.x': '46',
            'btnDownload.y': '12',
            'ctlStatementFilter': 'OFX',
        }
        download_url = urljoin(browser.url, 'Download.aspx?index=1')

        for input_name in input_names:
            data[input_name] = browser.find_by_name(input_name).first.value
        cookies = browser.cookies.all()
        
        r = requests.post(download_url, data=data, cookies=cookies,
            headers={'Referer': browser.url})
        if r.ok:
            return r.text
        shot('failure')
        raise Exception('Failed on the last part')


def getTransactions(args):
    enddate = date.today()
    startdate = enddate - timedelta(days=args.days)
    username = getValue('username', prompt='Username?')
    password = getValue('password', prompt='Password?')

    domain = 'capitalone.com'
    ofx = getOFX(username, password, startdate, enddate)
    parsed = parseFile(StringIO(ofx))
    ret = {
        'accounts': []
    }
    for account in parsed['accounts']:
        a = {
            'org': {
                'domain': domain,
                'sfin-url': None,
            },
            'id': getToken(account['account_id']),
            'name': 'unknown',
            'currency': account['currency'],
            'balance': str(account['balance']),
            'available_balance': 'unknown',
            'balance-as-of': account['transaction_end'].isoformat(),
            'transactions': [],
        }
        for transaction in account['transactions']:
            t = {
                'id': transaction['id'],
                'posted': transaction['posted'].isoformat(),
                'amount': transaction['amount'],
                'description': transaction['memo'] or transaction['name'],
            }
            a['transactions'].append(t)
        ret['accounts'].append(a)

    return ret


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--verbose', '-v',
        action="store_true",
        help='Display debugging information')
    parser.add_argument('days',
        type=int,
        default=10,
        help='Days back of transactions to get (default %(default)s)')
    args = parser.parse_args()

    ret = getTransactions(args)
    print json.dumps(ret, indent=2)

